# Autogenerated with SMOP 
from smop.core import *
# OSVR/main.m

    ## example of training and testing OSVR for expression intensity estimation
    clear('all')
    close_('all')
    ## load data
# train_data_seq: an array of cells containing training feature sequences,
# each cell contains a D*T matrix where D is dimension of feature and T is
# the sequence length
# train_label_seq: an array of cells containing training intensity labels
# for all the sequences, each cell contains a K*2 matrix where K is the
# number of frames with labeled intensities. The first column is the index
# of frame and the second column is associated intensity value
# test_data: a D*T' matrix containing testing frames, where D is the
# dimension of feature and T' is number of testing frames
    load('data.mat','train_data_seq','train_label_seq','test_data','test_label')
    ## define constant
    loss=2
# OSVR/main.m:17
    
    bias=1
# OSVR/main.m:18
    
    lambda_=1
# OSVR/main.m:19
    
    gamma=matlabarray(cat(100,1))
# OSVR/main.m:20
    
    smooth=1
# OSVR/main.m:21
    
    epsilon=matlabarray(cat(0.1,1))
# OSVR/main.m:22
    
    rho=0.1
# OSVR/main.m:23
    
    flag=0
# OSVR/main.m:24
    
    max_iter=300
# OSVR/main.m:25
    
    ## Training 
# formalize coefficients data structure
    A,c,D,nInts,nPairs,weight=constructParams(train_data_seq,train_label_seq,epsilon,bias,flag,nargout=6)
# OSVR/main.m:29
    mu=dot(gamma[1],ones(nInts + nPairs,1))
# OSVR/main.m:30
    
    mu[nInts + 1:end()]=dot(gamma[2] / gamma[1],mu[nInts + 1:end()])
# OSVR/main.m:31
    if smooth:
        mu=multiply(mu,weight)
# OSVR/main.m:33
    
    # solve the OSVR optimization problem in ADMM
    model,history,z=admm(A,c,lambda_,mu,'option',loss,'rho',rho,'max_iter',max_iter,'bias',1 - bias,nargout=3)
# OSVR/main.m:36
    
    theta=model.w
# OSVR/main.m:37
    ## Testing 
# perform testing
    dec_values=dot(theta.T,cat([test_data],[ones(1,size(test_data,2))]))
# OSVR/main.m:41
    # compute evaluation metrics
    RR=corrcoef(dec_values,test_label)
# OSVR/main.m:43
    ee=dec_values - test_label
# OSVR/main.m:44
    dat=cat([dec_values],[test_label]).T
# OSVR/main.m:45
    ry_test=RR[1,2]
# OSVR/main.m:46
    
    abs_test=sum(abs(ee)) / length(ee)
# OSVR/main.m:47
    
    mse_test=dot(ravel(ee).T,ravel(ee)) / length(ee)
# OSVR/main.m:48
    
    icc_test=ICC(3,'single',dat)
# OSVR/main.m:49
    
    ## Visualize results
    plot(test_label)
    hold('on')
    plot(dec_values,'r')
    legend('Ground truth','Prediction')